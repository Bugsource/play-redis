# ===================
# Redis cache configuration
# ===================
play.cache.redis {
  # redis server: host
  host:       localhost
  # redis server: port
  port:       6379
  # redis server: database number
  database:   1
  # connection timeout in milliseconds
  timeout:    1s
  # akka dispatcher
  dispatcher: akka.actor.default-dispatcher
  # synchronization timeout in play.api.cache.redis.CacheApi
  wait:       1s
  # configuration source: the connection settings are possibly extracted
  # from various sources. By default, the library expects values 'static'
  # for this configuration file, 'env' for extraction of the connection
  # string from the environment variable REDIS_URL and 'custom' when the
  # application supplies its own configuration extractor. By default it
  # expects local configuration.
  configuration: static
  # when authentication is required, define the password. The argument is optional
  password:    null
  # when environment configuration is used it reads the environment variable
  # and expects there a connection string. This key specifies the variable name.
  connection-string-variable: REDIS_URL
}

# ==================
# Akka configuration
# ==================
akka {
  log-dead-letters = off
  akka.log-dead-letters-during-shutdown = off

  # enables kryo settings customization
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    serializers {
      # kryo is much performant than default java serializer, it produces
      # smaller output stream in shorter time
      # since Akka 2.4.x, it deprecates the default Java serializer as not
      # optimal for the production use
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo
      "scala.collection.immutable.List" = kryo
    }
    # configuration of the serialization library
    kryo {
      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = "off"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. That this strategy was
      # added in version 0.4.1 and will not work with the previous versions
      idstrategy = "default"
    }
  }
}
